package com.tim18.skynet.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.tim18.skynet.dto.KorisnikDTO;
import com.tim18.skynet.model.Korisnik;
import com.tim18.skynet.service.KorisnikService;

@RestController
@RequestMapping(value="api/korisnici")
public class KorisnikController {
	@Autowired
	private KorisnikService korisnikService;
	
	@RequestMapping(value="/all", method = RequestMethod.GET)
	public ResponseEntity<List<KorisnikDTO>> getAllkorisnici() {
		
		List<Korisnik> korisnici = korisniciervice.findAll();
		
		//convert korisnici to DTOs
		List<KorisnikDTO> korisniciDTO = new ArrayList<>();
		for (Korisnik K : korisnici) {
			korisniciDTO.add(new KorisnikDTO(s));
		}
		
		return new ResponseEntity<>(korisniciDTO, HttpStatus.OK);
	}
	
	@RequestMapping(method = RequestMethod.GET)
	public ResponseEntity<List<StudentDTO>> getkorisniciPage(Pageable page) {
		
		//page object holds data about pagination and sorting
		//the object is created based on the url parameters "page", "size" and "sort" 
		Page<Student> korisnici = korisniciervice.findAll(page);
		
		//convert korisnici to DTOs
		List<StudentDTO> korisniciDTO = new ArrayList<>();
		for (Student s : korisnici) {
			korisniciDTO.add(new StudentDTO(s));
		}
		
		return new ResponseEntity<>(korisniciDTO, HttpStatus.OK);
	}
	
	@RequestMapping(value="/{id}", method=RequestMethod.GET)
	public ResponseEntity<StudentDTO> getStudent(@PathVariable Long id){
		
		Student student = korisniciervice.findOne(id);
		
		// studen must exist
		if(student == null){
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		
		return new ResponseEntity<>(new StudentDTO(student), HttpStatus.OK);
	}
	
	@RequestMapping(method=RequestMethod.POST, consumes="application/json")
	public ResponseEntity<StudentDTO> saveStudent(@RequestBody StudentDTO studentDTO){
		
		Student student = new Student();
		student.setIndex(studentDTO.getIndex());
		student.setFirstName(studentDTO.getFirstName());
		student.setLastName(studentDTO.getLastName());
		
		student = korisniciervice.save(student);
		return new ResponseEntity<>(new StudentDTO(student), HttpStatus.CREATED);	
	}
	
	@RequestMapping(method=RequestMethod.PUT, consumes="application/json")
	public ResponseEntity<StudentDTO> updateStudent(@RequestBody StudentDTO studentDTO){
		
		//a student must exist
		Student student = korisniciervice.findOne(studentDTO.getId()); 
		
		if (student == null) {
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		
		student.setIndex(studentDTO.getIndex());
		student.setFirstName(studentDTO.getFirstName());
		student.setLastName(studentDTO.getLastName());
		
		student = korisniciervice.save(student);
		return new ResponseEntity<>(new StudentDTO(student), HttpStatus.OK);	
	}
	
	@RequestMapping(value="/{id}", method=RequestMethod.DELETE)
	public ResponseEntity<Void> deleteStudent(@PathVariable Long id){
		
		Student student = korisniciervice.findOne(id);
		
		if (student != null){
			korisniciervice.remove(id);
			return new ResponseEntity<>(HttpStatus.OK);
		} else {		
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	
	@RequestMapping(value="/findIndex", method=RequestMethod.GET)
	public ResponseEntity<StudentDTO> getStudentByIndex(
			@RequestParam String index) {
		
		Student student = korisniciervice.findByIndex(index);
		if(student == null){
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}		
		return new ResponseEntity<>(new StudentDTO(student), HttpStatus.OK);
	}
	
	@RequestMapping(value = "/findLastName", method = RequestMethod.GET)
	public ResponseEntity<List<StudentDTO>> getkorisniciByLastName(
			@RequestParam String lastName) {
		
		List<Student> korisnici = korisniciervice.findByLastName(lastName);
		
		//convert korisnici to DTOs
		List<StudentDTO> korisniciDTO = new ArrayList<>();
		for (Student s : korisnici) {
			korisniciDTO.add(new StudentDTO(s));
		}
		return new ResponseEntity<>(korisniciDTO, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/prezime", method = RequestMethod.GET)
	public ResponseEntity<List<StudentDTO>> pronadjiStudentePoPrezimenu(
			@RequestParam String lastName) {
		
		List<Student> korisnici = korisniciervice.pronadjiPoPrezimenu(lastName);
		
		//convert korisnici to DTOs
		List<StudentDTO> korisniciDTO = new ArrayList<>();
		for (Student s : korisnici) {
			korisniciDTO.add(new StudentDTO(s));
		}
		return new ResponseEntity<>(korisniciDTO, HttpStatus.OK);
	}
	
	
	
	

}
